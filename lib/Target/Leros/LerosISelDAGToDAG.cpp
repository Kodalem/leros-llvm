//===- LerosISelDAGToDAG.cpp - A dag to dag inst selector for Leros ---===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Leros target.
//
//===----------------------------------------------------------------------===//

#include "Leros.h"
#include "LerosTargetMachine.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

namespace llvm {

#define DEBUG_TYPE "leros-isel"

// Leros  specific code to select Leros machine
// instructions for SelectionDAG operations.
namespace {
class LerosDAGToDAGISel : public SelectionDAGISel {
  const LerosSubtarget *Subtarget;

public:
  LerosDAGToDAGISel(LerosTargetMachine &TM) : SelectionDAGISel(TM) {}

  StringRef getPassName() const override {
    return "Leros DAG->DAG Pattern Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<LerosSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *N) override;

  bool SelectAddrFI(SDValue Addr, SDValue &Base);

public:
// Include the pieces autogenerated from the target description.
#include "LerosGenDAGISel.inc"
};
} // end anonymous namespace

void LerosDAGToDAGISel::Select(SDNode *Node) {
  unsigned Opcode = Node->getOpcode();
  MVT XLenVT = Subtarget->getXLenVT();

  // If we have a custom node, we have already selected
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }

  // Instruction Selection not handled by the auto-generated tablegen selection
  // should be handled here.
  if (Opcode == ISD::FrameIndex) {
    SDLoc DL(Node);
    SDValue Imm = CurDAG->getTargetConstant(0, DL, XLenVT);
    int FI = cast<FrameIndexSDNode>(Node)->getIndex();
    EVT VT = Node->getValueType(0);
    SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
    ReplaceNode(Node,
                CurDAG->getMachineNode(Leros::ADD_RI_PSEUDO, DL, VT, TFI, Imm));
    return;
  }

  // Select the default instruction.
  SelectCode(Node);
}

bool LerosDAGToDAGISel::SelectAddrFI(SDValue Addr, SDValue &Base) {
  if (auto FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), Subtarget->getXLenVT());
    return true;
  }
  return false;
}

/// createLerosISelDag - This pass converts a Lerosalized DAG into a
/// Leros-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createLerosISelDag(LerosTargetMachine &TM) {
  return new LerosDAGToDAGISel(TM);
}
} // namespace llvm
